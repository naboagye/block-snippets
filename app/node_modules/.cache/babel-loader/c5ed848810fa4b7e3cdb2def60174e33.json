{"ast":null,"code":"'use strict'; // A line containing no characters, or a line containing only spaces (U+0020) or\n// tabs (U+0009), is called a blank line.\n// See <https://spec.commonmark.org/0.29/#blank-line>.\n\nvar reBlankLine = /^[ \\t]*(\\n|$)/; // Note that though blank lines play a special role in lists to determine\n// whether the list is tight or loose\n// (<https://spec.commonmark.org/0.29/#blank-lines>), it’s done by the list\n// tokenizer and this blank line tokenizer does not have to be responsible for\n// that.\n// Therefore, configs such as `blankLine.notInList` do not have to be set here.\n\nmodule.exports = blankLine;\n\nfunction blankLine(eat, value, silent) {\n  var match;\n  var subvalue = '';\n  var index = 0;\n  var length = value.length;\n\n  while (index < length) {\n    match = reBlankLine.exec(value.slice(index));\n\n    if (match == null) {\n      break;\n    }\n\n    index += match[0].length;\n    subvalue += match[0];\n  }\n\n  if (subvalue === '') {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  eat(subvalue);\n}","map":{"version":3,"names":["reBlankLine","module","exports","blankLine","eat","value","silent","match","subvalue","index","length","exec","slice"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/node_modules/remark-parse/lib/tokenize/blank-line.js"],"sourcesContent":["'use strict'\n\n// A line containing no characters, or a line containing only spaces (U+0020) or\n// tabs (U+0009), is called a blank line.\n// See <https://spec.commonmark.org/0.29/#blank-line>.\nvar reBlankLine = /^[ \\t]*(\\n|$)/\n\n// Note that though blank lines play a special role in lists to determine\n// whether the list is tight or loose\n// (<https://spec.commonmark.org/0.29/#blank-lines>), it’s done by the list\n// tokenizer and this blank line tokenizer does not have to be responsible for\n// that.\n// Therefore, configs such as `blankLine.notInList` do not have to be set here.\nmodule.exports = blankLine\n\nfunction blankLine(eat, value, silent) {\n  var match\n  var subvalue = ''\n  var index = 0\n  var length = value.length\n\n  while (index < length) {\n    match = reBlankLine.exec(value.slice(index))\n\n    if (match == null) {\n      break\n    }\n\n    index += match[0].length\n    subvalue += match[0]\n  }\n\n  if (subvalue === '') {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  eat(subvalue)\n}\n"],"mappings":"AAAA,a,CAEA;AACA;AACA;;AACA,IAAIA,WAAW,GAAG,eAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiBC,SAAjB;;AAEA,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;EACrC,IAAIC,KAAJ;EACA,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,MAAM,GAAGL,KAAK,CAACK,MAAnB;;EAEA,OAAOD,KAAK,GAAGC,MAAf,EAAuB;IACrBH,KAAK,GAAGP,WAAW,CAACW,IAAZ,CAAiBN,KAAK,CAACO,KAAN,CAAYH,KAAZ,CAAjB,CAAR;;IAEA,IAAIF,KAAK,IAAI,IAAb,EAAmB;MACjB;IACD;;IAEDE,KAAK,IAAIF,KAAK,CAAC,CAAD,CAAL,CAASG,MAAlB;IACAF,QAAQ,IAAID,KAAK,CAAC,CAAD,CAAjB;EACD;;EAED,IAAIC,QAAQ,KAAK,EAAjB,EAAqB;IACnB;EACD;EAED;;;EACA,IAAIF,MAAJ,EAAY;IACV,OAAO,IAAP;EACD;;EAEDF,GAAG,CAACI,QAAD,CAAH;AACD"},"metadata":{},"sourceType":"script"}