{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"value\", \"padding\", \"minHeight\", \"placeholder\", \"language\", \"className\", \"style\", \"rehypePlugins\", \"onChange\"];\nimport React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport \"./style/index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport * from './SelectionText';\nexport default /*#__PURE__*/React.forwardRef((props, ref) => {\n  var {\n    prefixCls = 'w-tc-editor',\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    rehypePlugins,\n    onChange: _onChange\n  } = props,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var [value, setValue] = useState(props.value || '');\n  useEffect(() => setValue(props.value || ''), [props.value]);\n  var textRef = useRef(null);\n  useImperativeHandle(ref, () => textRef.current);\n  var contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding\n  };\n  var htmlStr = useMemo(() => processHtml(\"<pre aria-hidden=true><code \" + (language && value ? \"class=\\\"language-\" + language + \"\\\"\" : '') + \" >\" + htmlEncode(String(value || placeholder || '')) + \"</code><br /></pre>\", rehypePlugins), [value, placeholder, language, rehypePlugins]);\n  var preView = useMemo(() => /*#__PURE__*/_jsx(\"div\", {\n    style: _extends({}, styles.editor, contentStyle, {\n      minHeight\n    }),\n    className: prefixCls + \"-preview \" + (language ? \"language-\" + language : ''),\n    dangerouslySetInnerHTML: {\n      __html: htmlStr\n    }\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [prefixCls, language, htmlStr]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: _extends({}, styles.container, style),\n    className: prefixCls + \" \" + (className || ''),\n    children: [/*#__PURE__*/_jsx(\"textarea\", _extends({\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      spellCheck: \"false\",\n      autoCapitalize: \"off\"\n    }, other, {\n      placeholder: placeholder,\n      onKeyDown: evn => {\n        if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n          shortcuts(evn);\n        }\n      },\n      style: _extends({}, styles.editor, styles.textarea, contentStyle, {\n        minHeight\n      }, placeholder && !value ? {\n        WebkitTextFillColor: 'inherit'\n      } : {}),\n      ref: textRef,\n      onChange: evn => {\n        setValue(evn.target.value);\n        _onChange && _onChange(evn);\n      },\n      className: prefixCls + \"-text\",\n      value: value\n    })), preView]\n  });\n});","map":{"version":3,"sources":["../src/index.tsx"],"names":["prefixCls","padding","minHeight","onChange","other","useState","props","useEffect","setValue","textRef","useRef","useImperativeHandle","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","htmlStr","useMemo","processHtml","language","htmlEncode","String","value","preView","styles","__html","className","evn","shortcuts","WebkitTextFillColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { PluggableList } from 'unified';\nimport { processHtml, htmlEncode } from './utils';\nimport shortcuts from './shortcuts';\nimport * as styles from './styles';\nimport './style/index.less';\n\nexport * from './SelectionText';\n\nexport interface TextareaCodeEditorProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  prefixCls?: string;\n  /**\n   * Set what programming language the code belongs to.\n   */\n  language?: string;\n  /**\n   * Optional padding for code. Default: `10`.\n   */\n  padding?: number;\n  /**\n   * rehypePlugins (Array.<Plugin>, default: `[[rehypePrism, { ignoreMissing: true }]]`)\n   * List of [rehype plugins](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins) to use. See the next section for examples on how to pass options\n   */\n  rehypePlugins?: PluggableList;\n  /**\n   * The minimum height of the editor. Default: `16`.\n   */\n  minHeight?: number;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void | boolean;\n}\n\nexport default React.forwardRef<HTMLTextAreaElement, TextareaCodeEditorProps>((props, ref) => {\n  const {\n    prefixCls = 'w-tc-editor',\n    value: _,\n    padding = 10,\n    minHeight = 16,\n    placeholder,\n    language,\n    className,\n    style,\n    rehypePlugins,\n    onChange,\n    ...other\n  } = props;\n\n  const [value, setValue] = useState(props.value || '');\n  useEffect(\n    () => setValue(props.value || ''),\n    [props.value]\n  );\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  useImperativeHandle<HTMLTextAreaElement, HTMLTextAreaElement>(ref, () => textRef.current!);\n\n  const contentStyle = {\n    paddingTop: padding,\n    paddingRight: padding,\n    paddingBottom: padding,\n    paddingLeft: padding,\n  };\n\n  const htmlStr = useMemo(\n    () =>\n      processHtml(\n        `<pre aria-hidden=true><code ${language && value ? `class=\"language-${language}\"` : ''} >${htmlEncode(\n          String(value || placeholder || ''),\n        )}</code><br /></pre>`,\n        rehypePlugins,\n      ),\n    [value, placeholder, language, rehypePlugins],\n  );\n  const preView = useMemo(\n    () => (\n      <div\n        style={{ ...styles.editor, ...contentStyle, minHeight }}\n        className={`${prefixCls}-preview ${language ? `language-${language}` : ''}`}\n        dangerouslySetInnerHTML={{\n          __html: htmlStr,\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [prefixCls, language, htmlStr],\n  );\n\n  return (\n    <div style={{ ...styles.container, ...style }} className={`${prefixCls} ${className || ''}`}>\n      <textarea\n        autoComplete=\"off\"\n        autoCorrect=\"off\"\n        spellCheck=\"false\"\n        autoCapitalize=\"off\"\n        {...other}\n        placeholder={placeholder}\n        onKeyDown={(evn) => {\n          if (!other.onKeyDown || other.onKeyDown(evn) !== false) {\n            shortcuts(evn);\n          }\n        }}\n        style={{\n          ...styles.editor,\n          ...styles.textarea,\n          ...contentStyle,\n          minHeight,\n          ...(placeholder && !value ? { WebkitTextFillColor: 'inherit' } : {}),\n        }}\n        ref={textRef}\n        onChange={(evn) => {\n          setValue(evn.target.value);\n          onChange && onChange(evn);\n        }}\n        className={`${prefixCls}-text`}\n        value={value}\n      />\n      {preView}\n    </div>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}