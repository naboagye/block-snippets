{"ast":null,"code":"var _jsxFileName = \"/Users/The5AMDev/web3/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip, Avatar } from \"react-rainbow-components\";\nimport { faNoteSticky } from \"@fortawesome/free-solid-svg-icons\"; // Constants\n// SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram\n} = web3; // keypair for the account that will hold the notes data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl(\"devnet\"); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\"This is my test dev note.\", \"This is another test dev note.\", \"More dev notes just to test this out.\", \"One more dev note.\"];\nconst AvatarStyles = {\n  width: \"30px\",\n  height: \"30px\"\n};\nconst ChipContainer = {\n  paddingLeft: 0,\n  zIndex: 9,\n  top: \"-30%\"\n};\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\"\n  }\n};\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\n_c = PostItNote;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\n_c2 = Note;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n_c3 = Tape;\n\nconst PostItNoteComponent = props => {\n  return /*#__PURE__*/_jsxDEV(PostItNote, {\n    children: [/*#__PURE__*/_jsxDEV(Tape, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Note, {\n      children: props.notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chip, {\n      style: ChipContainer,\n      className: \"rainbow-m-around_medium\",\n      variant: \"neutral\",\n      label: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"rainbow-align-content_center\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: AvatarStyles,\n          className: \"rainbow-m-right_x-small\",\n          src: \"../assets/Solana_logo.png\",\n          assistiveText: \"Tahimi\",\n          title: \"Tahimi\",\n          size: \"medium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), props.userAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = PostItNoteComponent;\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addNote(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createNoteAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendNotes();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter note!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: notesList.map((note, index) => /*#__PURE__*/_jsxDEV(PostItNoteComponent, {\n            notes: note.noteText,\n            userAddress: note.userAddress.toString()\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Dev Notes Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your Dev Notes collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4uz6AjBMSnSnfyQIhqlpG4M64K0=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PostItNote\");\n$RefreshReg$(_c2, \"Note\");\n$RefreshReg$(_c3, \"Tape\");\n$RefreshReg$(_c4, \"PostItNoteComponent\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useEffect","useState","styled","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","Chip","Avatar","faNoteSticky","SystemProgram","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_NOTES","AvatarStyles","width","height","ChipContainer","paddingLeft","zIndex","top","colours","colors","sandyBrown","transparentBlack","transparentPaleGoldenrod","PostItNote","div","Note","Tape","PostItNoteComponent","props","notes","userAddress","App","walletAddress","setWalletAddress","inputValue","setInputValue","notesList","setNotesList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendNotes","length","provider","getProvider","program","rpc","addNote","accounts","user","wallet","getNotesList","onInputChange","event","value","target","connection","createNoteAccount","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","note","index","noteText","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip, Avatar } from \"react-rainbow-components\";\nimport { faNoteSticky } from \"@fortawesome/free-solid-svg-icons\";\n\n// Constants\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// keypair for the account that will hold the notes data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\n  \"This is my test dev note.\",\n  \"This is another test dev note.\",\n  \"More dev notes just to test this out.\",\n  \"One more dev note.\",\n];\n\nconst AvatarStyles = {\n  width: \"30px\",\n  height: \"30px\",\n};\n\nconst ChipContainer = {\n  paddingLeft: 0,\n  zIndex: 9,\n  top: \"-30%\",\n};\n\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\",\n  },\n};\n\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n\nconst PostItNoteComponent = (props) => {\n  return (\n    <PostItNote>\n      <Tape />\n      <Note>{props.notes}</Note>\n      <Chip\n        style={ChipContainer}\n        className=\"rainbow-m-around_medium\"\n        variant=\"neutral\"\n        label={\n          <span className=\"rainbow-align-content_center\">\n            <Avatar\n              style={AvatarStyles}\n              className=\"rainbow-m-right_x-small\"\n              src=\"../assets/Solana_logo.png\"\n              assistiveText=\"Tahimi\"\n              title=\"Tahimi\"\n              size=\"medium\"\n            />\n            {props.userAddress}\n          </span>\n        }\n      />\n    </PostItNote>\n  );\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addNote(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createNoteAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendNotes();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter note!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {notesList.map((note, index) => (\n              <PostItNoteComponent\n                key={index}\n                notes={note.noteText}\n                userAddress={note.userAddress.toString()}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Dev Notes Portal</p>\n          <p className=\"sub-text\">\n            View your Dev Notes collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}