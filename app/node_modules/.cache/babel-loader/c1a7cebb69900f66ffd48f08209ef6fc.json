{"ast":null,"code":"var _jsxFileName = \"/Users/The5AMDev/web3/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\"; // Constants\n// SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl(\"devnet\"); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\"This is my test dev note.\", \"This is another test dev note.\", \"More dev notes just to test this out.\", \"One more dev note.\"];\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\"\n  }\n};\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\n_c = PostItNote;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\n_c2 = Note;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n_c3 = Tape;\n\nconst PostItNoteComponent = props => {\n  return /*#__PURE__*/_jsxDEV(PostItNote, {\n    children: [/*#__PURE__*/_jsxDEV(Tape, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Note, {\n      children: props.notes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = PostItNoteComponent;\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Notes link:\", inputValue);\n      setNotesList([...notesList, inputValue]);\n      setInputValue(\"\");\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendNotes();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter note!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: notesList.map(note => /*#__PURE__*/_jsxDEV(PostItNoteComponent, {\n        notes: note\n      }, note, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\"); // Call Solana program here.\n      // Set state\n\n      setNotesList(TEST_NOTES);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Dev Notes Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your Dev Notes collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4uz6AjBMSnSnfyQIhqlpG4M64K0=\");\n\n_c5 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"PostItNote\");\n$RefreshReg$(_c2, \"Note\");\n$RefreshReg$(_c3, \"Tape\");\n$RefreshReg$(_c4, \"PostItNoteComponent\");\n$RefreshReg$(_c5, \"App\");","map":{"version":3,"names":["React","useEffect","useState","styled","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_NOTES","colours","colors","sandyBrown","transparentBlack","transparentPaleGoldenrod","PostItNote","div","Note","Tape","PostItNoteComponent","props","notes","App","walletAddress","setWalletAddress","inputValue","setInputValue","notesList","setNotesList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendNotes","length","onInputChange","event","value","target","getProvider","connection","provider","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","note","onLoad","addEventListener","removeEventListener","twitterLogo"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\n\n// Constants\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\n  \"This is my test dev note.\",\n  \"This is another test dev note.\",\n  \"More dev notes just to test this out.\",\n  \"One more dev note.\",\n];\n\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\",\n  },\n};\n\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n\nconst PostItNoteComponent = (props) => {\n  return (\n    <PostItNote>\n      <Tape />\n      <Note>{props.notes}</Note>\n    </PostItNote>\n  );\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Notes link:\", inputValue);\n      setNotesList([...notesList, inputValue]);\n      setInputValue(\"\");\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendNotes();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter note!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {notesList.map((note) => (\n          <PostItNoteComponent key={note} notes={note} />\n        ))}\n      </div>\n    </div>\n  );\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n\n      // Set state\n      setNotesList(TEST_NOTES);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Dev Notes Portal</p>\n          <p className=\"sub-text\">\n            View your Dev Notes collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}