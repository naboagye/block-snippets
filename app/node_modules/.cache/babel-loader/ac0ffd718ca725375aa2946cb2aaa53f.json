{"ast":null,"code":"var _jsxFileName = \"/Users/The5AMDev/web3/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { Card } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faThumbtack } from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\"; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\"This is my test dev note.\", \"This is another test dev note.\", \"More dev notes just to test this out.\", \"One more dev note.\"];\nconst iconContainerStyles = {\n  width: \"2.5rem\",\n  height: \"2.5rem\"\n};\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: ${props => props.theme.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${props => props.theme.colors.transparentBlack};\n  position: relative;\n`;\nexport const Tape = styled.div`\n  width: 49%;\n  height: 12.82%;\n  background-color: ${props => props.theme.colors.transparentPaleGoldenrod};\n  position: absolute;\n  left: 118.87px;\n  top: 0;\n`;\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Notes link:\", inputValue);\n      setNotesList([...notesList, inputValue]);\n      setInputValue(\"\");\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendNotes();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter notes link!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: notesList.map(note => /*#__PURE__*/_jsxDEV(Card, {\n        icon: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"rainbow-background-color_success rainbow-border-radius_circle rainbow-align-content_center\",\n          style: iconContainerStyles,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faThumbtack,\n            size: \"lg\",\n            className: \"rainbow-color_white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this),\n        style: Note,\n        title: note\n      }, note, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\"); // Call Solana program here.\n      // Set state\n\n      setNotesList(TEST_NOTES);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Dev Notes Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your Dev Notes collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4uz6AjBMSnSnfyQIhqlpG4M64K0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Card","FontAwesomeIcon","faThumbtack","styled","TWITTER_HANDLE","TWITTER_LINK","TEST_NOTES","iconContainerStyles","width","height","PostItNote","div","Note","props","theme","colors","sandyBrown","transparentBlack","Tape","transparentPaleGoldenrod","App","walletAddress","setWalletAddress","inputValue","setInputValue","notesList","setNotesList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendNotes","length","onInputChange","event","value","target","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","note","onLoad","addEventListener","removeEventListener","twitterLogo"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { Card } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faThumbtack } from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_NOTES = [\n  \"This is my test dev note.\",\n  \"This is another test dev note.\",\n  \"More dev notes just to test this out.\",\n  \"One more dev note.\",\n];\nconst iconContainerStyles = {\n  width: \"2.5rem\",\n  height: \"2.5rem\",\n};\n\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: ${(props) => props.theme.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${(props) => props.theme.colors.transparentBlack};\n  position: relative;\n`;\nexport const Tape = styled.div`\n  width: 49%;\n  height: 12.82%;\n  background-color: ${(props) => props.theme.colors.transparentPaleGoldenrod};\n  position: absolute;\n  left: 118.87px;\n  top: 0;\n`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Notes link:\", inputValue);\n      setNotesList([...notesList, inputValue]);\n      setInputValue(\"\");\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendNotes();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter notes link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {notesList.map((note) => (\n          <Card\n            icon={\n              <span\n                className=\"rainbow-background-color_success rainbow-border-radius_circle rainbow-align-content_center\"\n                style={iconContainerStyles}\n              >\n                <FontAwesomeIcon\n                  icon={faThumbtack}\n                  size=\"lg\"\n                  className=\"rainbow-color_white\"\n                />\n              </span>\n            }\n            style={Note}\n            key={note}\n            title={note}\n          ></Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n\n      // Call Solana program here.\n\n      // Set state\n      setNotesList(TEST_NOTES);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ Dev Notes Portal</p>\n          <p className=\"sub-text\">\n            View your Dev Notes collection in the metaverse âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}