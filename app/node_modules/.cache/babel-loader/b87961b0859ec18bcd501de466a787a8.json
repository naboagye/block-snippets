{"ast":null,"code":"var _jsxFileName = \"/Users/The5AMDev/web3/gif-portal-starter/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown, faPenToSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport { Dropdown, Button } from \"semantic-ui-react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport languages from \"./languages.js\"; // Constants\n// SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram\n} = web3; // keypair for the account that will hold the notes data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl(\"devnet\"); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nexport const ChipContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  z-index: 9;\n`;\n_c = ChipContainer;\nexport const UpDownContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 9;\n`;\n_c2 = UpDownContainer;\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\"\n  }\n};\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\n_c3 = PostItNote;\nexport const Note = styled.div`\n  width: 500px;\n  height: 500px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\n_c4 = Note;\nexport const ExpandedNote = styled(Modal)`\n  width: 800px;\n  height: 600px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const Edit = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\n_c5 = Edit;\nexport const Tape = styled.div`\n  width: 195px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: absolute;\n  top: -3%;\n  right: 30%;\n  z-index: 9;\n`;\n_c6 = Tape;\nexport const Editor = styled.div`\n  display: block;\n  max-height: 260px;\n  margin: 0 auto;\n  max-width: 593px;\n  margin-top: 50px !important;\n  overflow: auto;\n`;\n_c7 = Editor;\n\nconst App = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [id, setID] = useState(null);\n  const [notesList, setNotesList] = useState([]);\n  const [language, setLanguage] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setShow(true);\n    console.log(show);\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getRndInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const sendNotes = async () => {\n    let id = getRndInteger(0, 1000);\n\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addNote(inputValue, id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const upVote = async id => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.upvoteNote(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const downVote = async id => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.downvoteNote(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const onLanguageChange = (event, _ref) => {\n    let {\n      value\n    } = _ref;\n    console.log(value);\n    setLanguage(value);\n  };\n\n  const UpDown = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faArrowUp,\n        size: \"lg\",\n        onClick: () => upVote(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), \" \" + props.votes + \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faArrowDown,\n        size: \"lg\",\n        onClick: () => downVote(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  };\n\n  const CodeModal = props => {\n    _s();\n\n    const [code, setCode] = React.useState(props.inputValue);\n\n    const onCode = event => {\n      setCode(event.target.value);\n    };\n\n    const handleSubmit = () => {\n      setShow(false);\n      updateNote(id);\n    };\n\n    const handleClose = () => setCode(\"\");\n\n    const updateNote = async id => {\n      //let id = getRndInteger(0, 1000);\n      console.log(id);\n\n      if (code.length === 0) {\n        console.log(\"No note link given!\");\n        return;\n      }\n\n      setInputValue(\"\");\n      console.log(\"Notes link:\", code);\n\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        await program.rpc.editNote(code, id, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey\n          }\n        });\n        console.log(\"Note successfully updated in program\", code);\n        await getNotesList();\n      } catch (error) {\n        console.log(\"Error sending Note:\", error);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Edit Dev Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          value: code,\n          onChange: onCode,\n          language: \"js\",\n          placeholder: \"Empty Note.\",\n          minHeight: 250,\n          padding: 15,\n          style: {\n            fontSize: 12,\n            backgroundColor: \"#f5f5f5\",\n            fontFamily: \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => {\n            handleClose();\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            handleSubmit();\n          },\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(CodeModal, \"CehWK5Odd44zzuxAJl7R0rg8+q8=\");\n\n  const PostItNoteComponent = props => {\n    return /*#__PURE__*/_jsxDEV(PostItNote, {\n      children: /*#__PURE__*/_jsxDEV(Note, {\n        children: [/*#__PURE__*/_jsxDEV(Tape, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n          value: props.notes,\n          onChange: onInputChange,\n          language: \"js\",\n          placeholder: \"Empty Dev Note.\",\n          padding: 15,\n          style: {\n            fontSize: 12,\n            backgroundColor: \"#F3CF4F\",\n            fontFamily: \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Edit, {\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPenToSquare,\n            size: \"2x\",\n            onClick: () => {\n              setInputValue(props.notes);\n              setID(props.id);\n              handleShow();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), \"Edit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpDownContainer, {\n          children: /*#__PURE__*/_jsxDEV(UpDown, {\n            votes: props.votes,\n            id: props.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChipContainer, {\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            className: \"rainbow-m-around_medium\",\n            label: \"🏠: \" + props.userAddress.substring(0, 9),\n            variant: \"neutral\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 415,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createNoteAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendNotes();\n          },\n          children: [/*#__PURE__*/_jsxDEV(Editor, {\n            children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n              value: inputValue,\n              language: language,\n              placeholder: \"Please enter some code.\",\n              onChange: onInputChange,\n              minHeight: 250,\n              padding: 15,\n              style: {\n                fontSize: 12,\n                backgroundColor: \"#f5f5f5\",\n                fontFamily: \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n            placeholder: \"Language\",\n            selection: true,\n            options: languages,\n            onChange: onLanguageChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: [notesList.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(PostItNoteComponent, {\n              notes: note.noteText,\n              userAddress: note.userAddress.toString(),\n              id: note.noteId,\n              votes: note.votes\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(CodeModal, {\n            show: show,\n            inputValue: inputValue,\n            onInputChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Dev Notes Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your Dev Notes collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 532,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(App, \"hdeInv1H5pX0Nn6x7FIFxvqE1yQ=\");\n\n_c8 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"ChipContainer\");\n$RefreshReg$(_c2, \"UpDownContainer\");\n$RefreshReg$(_c3, \"PostItNote\");\n$RefreshReg$(_c4, \"Note\");\n$RefreshReg$(_c5, \"Edit\");\n$RefreshReg$(_c6, \"Tape\");\n$RefreshReg$(_c7, \"Editor\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"names":["React","useEffect","useState","styled","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","Chip","FontAwesomeIcon","faArrowUp","faArrowDown","faPenToSquare","CodeEditor","Dropdown","Button","Modal","languages","SystemProgram","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","ChipContainer","div","UpDownContainer","colours","colors","sandyBrown","transparentBlack","transparentPaleGoldenrod","PostItNote","Note","ExpandedNote","Edit","Tape","Editor","App","walletAddress","setWalletAddress","inputValue","setInputValue","id","setID","notesList","setNotesList","language","setLanguage","show","setShow","handleShow","console","log","checkIfWalletIsConnected","solana","window","isPhantom","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","getRndInteger","min","max","Math","floor","random","sendNotes","length","provider","getProvider","program","rpc","addNote","accounts","user","wallet","getNotesList","upVote","upvoteNote","downVote","downvoteNote","onInputChange","event","value","target","onLanguageChange","UpDown","props","votes","CodeModal","code","setCode","onCode","handleSubmit","updateNote","handleClose","editNote","fontSize","backgroundColor","fontFamily","PostItNoteComponent","notes","userAddress","substring","connection","createNoteAccount","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","note","index","noteText","noteId","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faArrowUp,\n  faArrowDown,\n  faPenToSquare,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport { Dropdown, Button } from \"semantic-ui-react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport languages from \"./languages.js\";\n\n// Constants\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// keypair for the account that will hold the notes data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nexport const ChipContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  z-index: 9;\n`;\n\nexport const UpDownContainer = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  z-index: 9;\n`;\n\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\",\n  },\n};\n\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 500px;\n  height: 500px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const ExpandedNote = styled(Modal)`\n  width: 800px;\n  height: 600px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const Edit = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n`;\nexport const Tape = styled.div`\n  width: 195px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: absolute;\n  top: -3%;\n  right: 30%;\n  z-index: 9;\n`;\nexport const Editor = styled.div`\n  display: block;\n  max-height: 260px;\n  margin: 0 auto;\n  max-width: 593px;\n  margin-top: 50px !important;\n  overflow: auto;\n`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [id, setID] = useState(null);\n  const [notesList, setNotesList] = useState([]);\n  const [language, setLanguage] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  const handleShow = () => {\n    setShow(true);\n    console.log(show);\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const getRndInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  const sendNotes = async () => {\n    let id = getRndInteger(0, 1000);\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addNote(inputValue, id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const upVote = async (id) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.upvoteNote(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const downVote = async (id) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.downvoteNote(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const onLanguageChange = (event, { value }) => {\n    console.log(value);\n    setLanguage(value);\n  };\n\n  const UpDown = (props) => {\n    return (\n      <div>\n        <FontAwesomeIcon\n          icon={faArrowUp}\n          size=\"lg\"\n          onClick={() => upVote(props.id)}\n        />\n        {\" \" + props.votes + \" \"}\n        <FontAwesomeIcon\n          icon={faArrowDown}\n          size=\"lg\"\n          onClick={() => downVote(props.id)}\n        />\n      </div>\n    );\n  };\n\n  const CodeModal = (props) => {\n    const [code, setCode] = React.useState(props.inputValue);\n\n    const onCode = (event) => {\n      setCode(event.target.value);\n    };\n    const handleSubmit = () => {\n      setShow(false);\n      updateNote(id);\n    };\n    const handleClose = () => setCode(\"\");\n\n    const updateNote = async (id) => {\n      //let id = getRndInteger(0, 1000);\n      console.log(id);\n      if (code.length === 0) {\n        console.log(\"No note link given!\");\n        return;\n      }\n      setInputValue(\"\");\n      console.log(\"Notes link:\", code);\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n\n        await program.rpc.editNote(code, id, {\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n          },\n        });\n        console.log(\"Note successfully updated in program\", code);\n\n        await getNotesList();\n      } catch (error) {\n        console.log(\"Error sending Note:\", error);\n      }\n    };\n\n    return (\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Edit Dev Note</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <CodeEditor\n            value={code}\n            onChange={onCode}\n            language=\"js\"\n            placeholder=\"Empty Note.\"\n            minHeight={250}\n            padding={15}\n            style={{\n              fontSize: 12,\n              backgroundColor: \"#f5f5f5\",\n              fontFamily:\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              handleClose();\n            }}\n          >\n            Clear\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              handleSubmit();\n            }}\n          >\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  };\n\n  const PostItNoteComponent = (props) => {\n    return (\n      <PostItNote>\n        <Note>\n          <Tape />\n          <CodeEditor\n            value={props.notes}\n            onChange={onInputChange}\n            language=\"js\"\n            placeholder=\"Empty Dev Note.\"\n            padding={15}\n            style={{\n              fontSize: 12,\n              backgroundColor: \"#F3CF4F\",\n              fontFamily:\n                \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            }}\n          />\n          <Edit>\n            <FontAwesomeIcon\n              icon={faPenToSquare}\n              size=\"2x\"\n              onClick={() => {\n                setInputValue(props.notes);\n                setID(props.id);\n                handleShow();\n              }}\n            />\n            Edit\n          </Edit>\n          <UpDownContainer>\n            <UpDown votes={props.votes} id={props.id} />\n          </UpDownContainer>\n          <ChipContainer>\n            <Chip\n              className=\"rainbow-m-around_medium\"\n              label={\"🏠: \" + props.userAddress.substring(0, 9)}\n              variant=\"neutral\"\n            />\n          </ChipContainer>\n        </Note>\n      </PostItNote>\n    );\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createNoteAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendNotes();\n            }}\n          >\n            <Editor>\n              <CodeEditor\n                value={inputValue}\n                language={language}\n                placeholder=\"Please enter some code.\"\n                onChange={onInputChange}\n                minHeight={250}\n                padding={15}\n                style={{\n                  fontSize: 12,\n                  backgroundColor: \"#f5f5f5\",\n                  fontFamily:\n                    \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n                }}\n              />\n            </Editor>\n            <Dropdown\n              placeholder=\"Language\"\n              selection\n              options={languages}\n              onChange={onLanguageChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {notesList.map((note, index) => (\n              <div key={index}>\n                <PostItNoteComponent\n                  key={index}\n                  notes={note.noteText}\n                  userAddress={note.userAddress.toString()}\n                  id={note.noteId}\n                  votes={note.votes}\n                />\n              </div>\n            ))}\n            <CodeModal\n              show={show}\n              inputValue={inputValue}\n              onInputChange={onInputChange}\n            />\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Dev Notes Portal</p>\n          <p className=\"sub-text\">\n            View your Dev Notes collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}