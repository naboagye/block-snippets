{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\n\nvar locate = require('../locate/link');\n\nmodule.exports = link;\nlink.locator = locate;\nvar lineFeed = '\\n';\nvar exclamationMark = '!';\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = '(';\nvar rightParenthesis = ')';\nvar lessThan = '<';\nvar greaterThan = '>';\nvar leftSquareBracket = '[';\nvar backslash = '\\\\';\nvar rightSquareBracket = ']';\nvar graveAccent = '`';\n\nfunction link(eat, value, silent) {\n  var self = this;\n  var subvalue = '';\n  var index = 0;\n  var character = value.charAt(0);\n  var pedantic = self.options.pedantic;\n  var commonmark = self.options.commonmark;\n  var gfm = self.options.gfm;\n  var closed;\n  var count;\n  var opening;\n  var beforeURL;\n  var beforeTitle;\n  var subqueue;\n  var hasMarker;\n  var isImage;\n  var content;\n  var marker;\n  var length;\n  var title;\n  var depth;\n  var queue;\n  var url;\n  var now;\n  var exit;\n  var node; // Detect whether this is an image.\n\n  if (character === exclamationMark) {\n    isImage = true;\n    subvalue = character;\n    character = value.charAt(++index);\n  } // Eat the opening.\n\n\n  if (character !== leftSquareBracket) {\n    return;\n  } // Exit when this is a link and we’re already inside a link.\n\n\n  if (!isImage && self.inLink) {\n    return;\n  }\n\n  subvalue += character;\n  queue = '';\n  index++; // Eat the content.\n\n  length = value.length;\n  now = eat.now();\n  depth = 0;\n  now.column += index;\n  now.offset += index;\n\n  while (index < length) {\n    character = value.charAt(index);\n    subqueue = character;\n\n    if (character === graveAccent) {\n      // Inline-code in link content.\n      count = 1;\n\n      while (value.charAt(index + 1) === graveAccent) {\n        subqueue += character;\n        index++;\n        count++;\n      }\n\n      if (!opening) {\n        opening = count;\n      } else if (count >= opening) {\n        opening = 0;\n      }\n    } else if (character === backslash) {\n      // Allow brackets to be escaped.\n      index++;\n      subqueue += value.charAt(index);\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\n      // In GFM mode, brackets in code still count.  In all other modes,\n      // they don’t.\n      depth++;\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\n      if (depth) {\n        depth--;\n      } else {\n        if (value.charAt(index + 1) !== leftParenthesis) {\n          return;\n        }\n\n        subqueue += leftParenthesis;\n        closed = true;\n        index++;\n        break;\n      }\n    }\n\n    queue += subqueue;\n    subqueue = '';\n    index++;\n  } // Eat the content closing.\n\n\n  if (!closed) {\n    return;\n  }\n\n  content = queue;\n  subvalue += queue + subqueue;\n  index++; // Eat white-space.\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    subvalue += character;\n    index++;\n  } // Eat the URL.\n\n\n  character = value.charAt(index);\n  queue = '';\n  beforeURL = subvalue;\n\n  if (character === lessThan) {\n    index++;\n    beforeURL += lessThan;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === greaterThan) {\n        break;\n      }\n\n      if (commonmark && character === lineFeed) {\n        return;\n      }\n\n      queue += character;\n      index++;\n    }\n\n    if (value.charAt(index) !== greaterThan) {\n      return;\n    }\n\n    subvalue += lessThan + queue + greaterThan;\n    url = queue;\n    index++;\n  } else {\n    character = null;\n    subqueue = '';\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (subqueue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n        break;\n      }\n\n      if (whitespace(character)) {\n        if (!pedantic) {\n          break;\n        }\n\n        subqueue += character;\n      } else {\n        if (character === leftParenthesis) {\n          depth++;\n        } else if (character === rightParenthesis) {\n          if (depth === 0) {\n            break;\n          }\n\n          depth--;\n        }\n\n        queue += subqueue;\n        subqueue = '';\n\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n\n        queue += character;\n      }\n\n      index++;\n    }\n\n    subvalue += queue;\n    url = queue;\n    index = subvalue.length;\n  } // Eat white-space.\n\n\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n  subvalue += queue; // Eat the title.\n\n  if (queue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n    index++;\n    subvalue += character;\n    queue = '';\n    marker = character === leftParenthesis ? rightParenthesis : character;\n    beforeTitle = subvalue; // In commonmark-mode, things are pretty easy: the marker cannot occur\n    // inside the title.  Non-commonmark does, however, support nested\n    // delimiters.\n\n    if (commonmark) {\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character === marker) {\n          break;\n        }\n\n        if (character === backslash) {\n          queue += backslash;\n          character = value.charAt(++index);\n        }\n\n        index++;\n        queue += character;\n      }\n\n      character = value.charAt(index);\n\n      if (character !== marker) {\n        return;\n      }\n\n      title = queue;\n      subvalue += queue + character;\n      index++;\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (!whitespace(character)) {\n          break;\n        }\n\n        subvalue += character;\n        index++;\n      }\n    } else {\n      subqueue = '';\n\n      while (index < length) {\n        character = value.charAt(index);\n\n        if (character === marker) {\n          if (hasMarker) {\n            queue += marker + subqueue;\n            subqueue = '';\n          }\n\n          hasMarker = true;\n        } else if (!hasMarker) {\n          queue += character;\n        } else if (character === rightParenthesis) {\n          subvalue += queue + marker + subqueue;\n          title = queue;\n          break;\n        } else if (whitespace(character)) {\n          subqueue += character;\n        } else {\n          queue += marker + subqueue + character;\n          subqueue = '';\n          hasMarker = false;\n        }\n\n        index++;\n      }\n    }\n  }\n\n  if (value.charAt(index) !== rightParenthesis) {\n    return;\n  }\n  /* istanbul ignore if - never used (yet) */\n\n\n  if (silent) {\n    return true;\n  }\n\n  subvalue += rightParenthesis;\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n    nonTerminated: false\n  });\n\n  if (title) {\n    beforeTitle = eat(beforeTitle).test().end;\n    title = self.decode.raw(self.unescape(title), beforeTitle);\n  }\n\n  node = {\n    type: isImage ? 'image' : 'link',\n    title: title || null,\n    url: url\n  };\n\n  if (isImage) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  } else {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  }\n\n  return eat(subvalue)(node);\n}","map":{"version":3,"names":["whitespace","require","locate","module","exports","link","locator","lineFeed","exclamationMark","quotationMark","apostrophe","leftParenthesis","rightParenthesis","lessThan","greaterThan","leftSquareBracket","backslash","rightSquareBracket","graveAccent","eat","value","silent","self","subvalue","index","character","charAt","pedantic","options","commonmark","gfm","closed","count","opening","beforeURL","beforeTitle","subqueue","hasMarker","isImage","content","marker","length","title","depth","queue","url","now","exit","node","inLink","column","offset","decode","raw","unescape","test","end","nonTerminated","type","alt","enterLink","children","tokenizeInline"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/node_modules/remark-parse/lib/tokenize/link.js"],"sourcesContent":["'use strict'\n\nvar whitespace = require('is-whitespace-character')\nvar locate = require('../locate/link')\n\nmodule.exports = link\nlink.locator = locate\n\nvar lineFeed = '\\n'\nvar exclamationMark = '!'\nvar quotationMark = '\"'\nvar apostrophe = \"'\"\nvar leftParenthesis = '('\nvar rightParenthesis = ')'\nvar lessThan = '<'\nvar greaterThan = '>'\nvar leftSquareBracket = '['\nvar backslash = '\\\\'\nvar rightSquareBracket = ']'\nvar graveAccent = '`'\n\nfunction link(eat, value, silent) {\n  var self = this\n  var subvalue = ''\n  var index = 0\n  var character = value.charAt(0)\n  var pedantic = self.options.pedantic\n  var commonmark = self.options.commonmark\n  var gfm = self.options.gfm\n  var closed\n  var count\n  var opening\n  var beforeURL\n  var beforeTitle\n  var subqueue\n  var hasMarker\n  var isImage\n  var content\n  var marker\n  var length\n  var title\n  var depth\n  var queue\n  var url\n  var now\n  var exit\n  var node\n\n  // Detect whether this is an image.\n  if (character === exclamationMark) {\n    isImage = true\n    subvalue = character\n    character = value.charAt(++index)\n  }\n\n  // Eat the opening.\n  if (character !== leftSquareBracket) {\n    return\n  }\n\n  // Exit when this is a link and we’re already inside a link.\n  if (!isImage && self.inLink) {\n    return\n  }\n\n  subvalue += character\n  queue = ''\n  index++\n\n  // Eat the content.\n  length = value.length\n  now = eat.now()\n  depth = 0\n\n  now.column += index\n  now.offset += index\n\n  while (index < length) {\n    character = value.charAt(index)\n    subqueue = character\n\n    if (character === graveAccent) {\n      // Inline-code in link content.\n      count = 1\n\n      while (value.charAt(index + 1) === graveAccent) {\n        subqueue += character\n        index++\n        count++\n      }\n\n      if (!opening) {\n        opening = count\n      } else if (count >= opening) {\n        opening = 0\n      }\n    } else if (character === backslash) {\n      // Allow brackets to be escaped.\n      index++\n      subqueue += value.charAt(index)\n    } else if ((!opening || gfm) && character === leftSquareBracket) {\n      // In GFM mode, brackets in code still count.  In all other modes,\n      // they don’t.\n      depth++\n    } else if ((!opening || gfm) && character === rightSquareBracket) {\n      if (depth) {\n        depth--\n      } else {\n        if (value.charAt(index + 1) !== leftParenthesis) {\n          return\n        }\n\n        subqueue += leftParenthesis\n        closed = true\n        index++\n\n        break\n      }\n    }\n\n    queue += subqueue\n    subqueue = ''\n    index++\n  }\n\n  // Eat the content closing.\n  if (!closed) {\n    return\n  }\n\n  content = queue\n  subvalue += queue + subqueue\n  index++\n\n  // Eat white-space.\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (!whitespace(character)) {\n      break\n    }\n\n    subvalue += character\n    index++\n  }\n\n  // Eat the URL.\n  character = value.charAt(index)\n  queue = ''\n  beforeURL = subvalue\n\n  if (character === lessThan) {\n    index++\n    beforeURL += lessThan\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (character === greaterThan) {\n        break\n      }\n\n      if (commonmark && character === lineFeed) {\n        return\n      }\n\n      queue += character\n      index++\n    }\n\n    if (value.charAt(index) !== greaterThan) {\n      return\n    }\n\n    subvalue += lessThan + queue + greaterThan\n    url = queue\n    index++\n  } else {\n    character = null\n    subqueue = ''\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (\n        subqueue &&\n        (character === quotationMark ||\n          character === apostrophe ||\n          (commonmark && character === leftParenthesis))\n      ) {\n        break\n      }\n\n      if (whitespace(character)) {\n        if (!pedantic) {\n          break\n        }\n\n        subqueue += character\n      } else {\n        if (character === leftParenthesis) {\n          depth++\n        } else if (character === rightParenthesis) {\n          if (depth === 0) {\n            break\n          }\n\n          depth--\n        }\n\n        queue += subqueue\n        subqueue = ''\n\n        if (character === backslash) {\n          queue += backslash\n          character = value.charAt(++index)\n        }\n\n        queue += character\n      }\n\n      index++\n    }\n\n    subvalue += queue\n    url = queue\n    index = subvalue.length\n  }\n\n  // Eat white-space.\n  queue = ''\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (!whitespace(character)) {\n      break\n    }\n\n    queue += character\n    index++\n  }\n\n  character = value.charAt(index)\n  subvalue += queue\n\n  // Eat the title.\n  if (\n    queue &&\n    (character === quotationMark ||\n      character === apostrophe ||\n      (commonmark && character === leftParenthesis))\n  ) {\n    index++\n    subvalue += character\n    queue = ''\n    marker = character === leftParenthesis ? rightParenthesis : character\n    beforeTitle = subvalue\n\n    // In commonmark-mode, things are pretty easy: the marker cannot occur\n    // inside the title.  Non-commonmark does, however, support nested\n    // delimiters.\n    if (commonmark) {\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (character === marker) {\n          break\n        }\n\n        if (character === backslash) {\n          queue += backslash\n          character = value.charAt(++index)\n        }\n\n        index++\n        queue += character\n      }\n\n      character = value.charAt(index)\n\n      if (character !== marker) {\n        return\n      }\n\n      title = queue\n      subvalue += queue + character\n      index++\n\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (!whitespace(character)) {\n          break\n        }\n\n        subvalue += character\n        index++\n      }\n    } else {\n      subqueue = ''\n\n      while (index < length) {\n        character = value.charAt(index)\n\n        if (character === marker) {\n          if (hasMarker) {\n            queue += marker + subqueue\n            subqueue = ''\n          }\n\n          hasMarker = true\n        } else if (!hasMarker) {\n          queue += character\n        } else if (character === rightParenthesis) {\n          subvalue += queue + marker + subqueue\n          title = queue\n          break\n        } else if (whitespace(character)) {\n          subqueue += character\n        } else {\n          queue += marker + subqueue + character\n          subqueue = ''\n          hasMarker = false\n        }\n\n        index++\n      }\n    }\n  }\n\n  if (value.charAt(index) !== rightParenthesis) {\n    return\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true\n  }\n\n  subvalue += rightParenthesis\n\n  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n    nonTerminated: false\n  })\n\n  if (title) {\n    beforeTitle = eat(beforeTitle).test().end\n    title = self.decode.raw(self.unescape(title), beforeTitle)\n  }\n\n  node = {\n    type: isImage ? 'image' : 'link',\n    title: title || null,\n    url: url\n  }\n\n  if (isImage) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null\n  } else {\n    exit = self.enterLink()\n    node.children = self.tokenizeInline(content, now)\n    exit()\n  }\n\n  return eat(subvalue)(node)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}