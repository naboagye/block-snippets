{"ast":null,"code":"import { stopPropagation } from './utils';\nimport { SelectionText } from './SelectionText';\nexport default function shortcuts(e) {\n  var api = new SelectionText(e.target);\n\n  if (e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n\n    if (api.start === api.end) {\n      api.insertText('  ').position(api.start + 2, api.end + 2);\n    } else if (api.getSelectedValue().indexOf('\\n') > -1 && e.shiftKey) {\n      api.lineStarRemove('  ');\n    } else if (api.getSelectedValue().indexOf('\\n') > -1) {\n      api.lineStarInstert('  ');\n    } else {\n      api.insertText('  ').position(api.start + 2, api.end);\n    }\n\n    api.notifyChange();\n  } else if (e.code && e.code.toLowerCase() === 'enter') {\n    stopPropagation(e);\n    var indent = \"\\n\" + api.getIndentText();\n    api.insertText(indent).position(api.start + indent.length, api.start + indent.length);\n    api.notifyChange();\n  } else if (e.code && /^(quote|backquote|bracketleft|digit9|comma)$/.test(e.code.toLowerCase()) && api.getSelectedValue()) {\n    stopPropagation(e);\n    var val = api.getSelectedValue();\n    var txt = '';\n\n    switch (e.code.toLowerCase()) {\n      case 'quote':\n        txt = \"'\" + val + \"'\";\n\n        if (e.shiftKey) {\n          txt = \"\\\"\" + val + \"\\\"\";\n        }\n\n        break;\n\n      case 'backquote':\n        txt = \"`\" + val + \"`\";\n        break;\n\n      case 'bracketleft':\n        txt = \"[\" + val + \"]\";\n\n        if (e.shiftKey) {\n          txt = \"{\" + val + \"}\";\n        }\n\n        break;\n\n      case 'digit9':\n        txt = \"(\" + val + \")\";\n        break;\n\n      case 'comma':\n        txt = \"<\" + val + \">\";\n        break;\n    }\n\n    api.insertText(txt);\n    api.notifyChange();\n  }\n}","map":{"version":3,"sources":["../src/shortcuts.ts"],"names":["api","e","stopPropagation","indent","val","txt"],"mappings":"AACA,SAAA,eAAA,QAAA,SAAA;AACA,SAAA,aAAA,QAAA,iBAAA;AAEA,eAAe,SAAA,SAAA,CAAA,CAAA,EAAgE;EAC7E,IAAMA,GAAG,GAAG,IAAA,aAAA,CAAkBC,CAAC,CAA/B,MAAY,CAAZ;;EACA,IAAIA,CAAC,CAADA,IAAAA,IAAUA,CAAC,CAADA,IAAAA,CAAAA,WAAAA,OAAd,KAAA,EAA8C;IAC5CC,eAAe,CAAfA,CAAe,CAAfA;;IACA,IAAIF,GAAG,CAAHA,KAAAA,KAAcA,GAAG,CAArB,GAAA,EAA2B;MACzBA,GAAG,CAAHA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,CAA8BA,GAAG,CAAHA,KAAAA,GAA9BA,CAAAA,EAA6CA,GAAG,CAAHA,GAAAA,GAA7CA,CAAAA;IADF,CAAA,MAEO,IAAIA,GAAG,CAAHA,gBAAAA,GAAAA,OAAAA,CAAAA,IAAAA,IAAuC,CAAvCA,CAAAA,IAA6CC,CAAC,CAAlD,QAAA,EAA6D;MAClED,GAAG,CAAHA,cAAAA,CAAAA,IAAAA;IADK,CAAA,MAEA,IAAIA,GAAG,CAAHA,gBAAAA,GAAAA,OAAAA,CAAAA,IAAAA,IAAuC,CAA3C,CAAA,EAA+C;MACpDA,GAAG,CAAHA,eAAAA,CAAAA,IAAAA;IADK,CAAA,MAEA;MACLA,GAAG,CAAHA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,CAA8BA,GAAG,CAAHA,KAAAA,GAA9BA,CAAAA,EAA6CA,GAAG,CAAhDA,GAAAA;IACD;;IACDA,GAAG,CAAHA,YAAAA;EAXF,CAAA,MAYO,IAAIC,CAAC,CAADA,IAAAA,IAAUA,CAAC,CAADA,IAAAA,CAAAA,WAAAA,OAAd,OAAA,EAAgD;IACrDC,eAAe,CAAfA,CAAe,CAAfA;IACA,IAAMC,MAAM,GAAA,OAAQH,GAAG,CAAvB,aAAoBA,EAApB;IACAA,GAAG,CAAHA,UAAAA,CAAAA,MAAAA,EAAAA,QAAAA,CAAgCA,GAAG,CAAHA,KAAAA,GAAYG,MAAM,CAAlDH,MAAAA,EAA2DA,GAAG,CAAHA,KAAAA,GAAYG,MAAM,CAA7EH,MAAAA;IACAA,GAAG,CAAHA,YAAAA;EAJK,CAAA,MAKA,IACLC,CAAC,CAADA,IAAAA,IACA,+CAAA,IAAA,CAAoDA,CAAC,CAADA,IAAAA,CADpDA,WACoDA,EAApD,CADAA,IAEAD,GAAG,CAHE,gBAGLA,EAHK,EAIL;IACAE,eAAe,CAAfA,CAAe,CAAfA;IACA,IAAME,GAAG,GAAGJ,GAAG,CAAf,gBAAYA,EAAZ;IACA,IAAIK,GAAG,GAAP,EAAA;;IACA,QAAQJ,CAAC,CAADA,IAAAA,CAAR,WAAQA,EAAR;MACE,KAAA,OAAA;QACEI,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;;QACA,IAAIJ,CAAC,CAAL,QAAA,EAAgB;UACdI,GAAG,GAAA,OAAA,GAAA,GAAHA,IAAAA;QACD;;QACD;;MACF,KAAA,WAAA;QACEA,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;QACA;;MACF,KAAA,aAAA;QACEA,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;;QACA,IAAIJ,CAAC,CAAL,QAAA,EAAgB;UACdI,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;QACD;;QACD;;MACF,KAAA,QAAA;QACEA,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;QACA;;MACF,KAAA,OAAA;QACEA,GAAG,GAAA,MAAA,GAAA,GAAHA,GAAAA;QACA;IArBJ;;IAuBAL,GAAG,CAAHA,UAAAA,CAAAA,GAAAA;IACAA,GAAG,CAAHA,YAAAA;EACD;AACF","sourcesContent":["import React from 'react';\nimport { stopPropagation } from './utils';\nimport { SelectionText } from './SelectionText';\n\nexport default function shortcuts(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  const api = new SelectionText(e.target as HTMLTextAreaElement);\n  if (e.code && e.code.toLowerCase() === 'tab') {\n    stopPropagation(e);\n    if (api.start === api.end) {\n      api.insertText('  ').position(api.start + 2, api.end + 2);\n    } else if (api.getSelectedValue().indexOf('\\n') > -1 && e.shiftKey) {\n      api.lineStarRemove('  ');\n    } else if (api.getSelectedValue().indexOf('\\n') > -1) {\n      api.lineStarInstert('  ');\n    } else {\n      api.insertText('  ').position(api.start + 2, api.end);\n    }\n    api.notifyChange();\n  } else if (e.code && e.code.toLowerCase() === 'enter') {\n    stopPropagation(e);\n    const indent = `\\n${api.getIndentText()}`;\n    api.insertText(indent).position(api.start + indent.length, api.start + indent.length);\n    api.notifyChange();\n  } else if (\n    e.code &&\n    /^(quote|backquote|bracketleft|digit9|comma)$/.test(e.code.toLowerCase()) &&\n    api.getSelectedValue()\n  ) {\n    stopPropagation(e);\n    const val = api.getSelectedValue();\n    let txt = '';\n    switch (e.code.toLowerCase()) {\n      case 'quote':\n        txt = `'${val}'`;\n        if (e.shiftKey) {\n          txt = `\"${val}\"`;\n        }\n        break;\n      case 'backquote':\n        txt = `\\`${val}\\``;\n        break;\n      case 'bracketleft':\n        txt = `[${val}]`;\n        if (e.shiftKey) {\n          txt = `{${val}}`;\n        }\n        break;\n      case 'digit9':\n        txt = `(${val})`;\n        break;\n      case 'comma':\n        txt = `<${val}>`;\n        break;\n    }\n    api.insertText(txt);\n    api.notifyChange();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}