{"ast":null,"code":"var _jsxFileName = \"/Users/The5AMDev/web3/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip, Icon } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\"; // Constants\n// SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram\n} = web3; // keypair for the account that will hold the notes data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl(\"devnet\"); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n};\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nexport const ChipContainer = styled.div`\n  position: relative;\n  left: 30%;\n  top: -12%;\n  z-index: 9;\n`;\n_c = ChipContainer;\nexport const UpDownContainer = styled.div`\n  position: relative;\n  left: -30%;\n  top: -7%;\n  z-index: 9;\n`;\n_c2 = UpDownContainer;\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\"\n  }\n};\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\n_c3 = PostItNote;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\n_c4 = Note;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n_c5 = Tape;\n\nconst App = () => {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log(\"Connected with Public Key:\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addNote(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const upVote = async event => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.upvoteNote(event.target.id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const downVote = async event => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.downvoteNote(event.target.id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const UpDown = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faArrowUp,\n        onClick: upVote,\n        id: props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), \" \" + props.votes + \" \", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faArrowDown,\n        onClick: downVote,\n        id: props.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  };\n\n  const PostItNoteComponent = props => {\n    return /*#__PURE__*/_jsxDEV(PostItNote, {\n      children: [/*#__PURE__*/_jsxDEV(Tape, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Note, {\n        children: props.notes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UpDownContainer, {\n        children: /*#__PURE__*/_jsxDEV(UpDown, {\n          votes: props.votes,\n          id: props.noteId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChipContainer, {\n        children: /*#__PURE__*/_jsxDEV(Chip, {\n          className: \"rainbow-m-around_medium\",\n          label: \"🏠: \" + props.userAddress.substring(0, 9),\n          variant: \"neutral\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createNoteAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendNotes();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter note!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: notesList.map((note, index) => /*#__PURE__*/_jsxDEV(PostItNoteComponent, {\n            notes: note.noteText,\n            userAddress: note.userAddress.toString(),\n            id: note.noteId\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? \"authed-container\" : \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Dev Notes Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your Dev Notes collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"4uz6AjBMSnSnfyQIhqlpG4M64K0=\");\n\n_c6 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ChipContainer\");\n$RefreshReg$(_c2, \"UpDownContainer\");\n$RefreshReg$(_c3, \"PostItNote\");\n$RefreshReg$(_c4, \"Note\");\n$RefreshReg$(_c5, \"Tape\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"names":["React","useEffect","useState","styled","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","Chip","Icon","FontAwesomeIcon","faArrowUp","faArrowDown","SystemProgram","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","ChipContainer","div","UpDownContainer","colours","colors","sandyBrown","transparentBlack","transparentPaleGoldenrod","PostItNote","Note","Tape","App","walletAddress","setWalletAddress","inputValue","setInputValue","notesList","setNotesList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendNotes","length","provider","getProvider","program","rpc","addNote","accounts","user","wallet","getNotesList","upVote","event","upvoteNote","target","id","downVote","downvoteNote","onInputChange","value","UpDown","props","votes","PostItNoteComponent","notes","noteId","userAddress","substring","connection","createNoteAccount","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","note","index","noteText","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nimport { Chip, Icon } from \"react-rainbow-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\n// Constants\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram } = web3;\n\n// keypair for the account that will hold the notes data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nexport const ChipContainer = styled.div`\n  position: relative;\n  left: 30%;\n  top: -12%;\n  z-index: 9;\n`;\n\nexport const UpDownContainer = styled.div`\n  position: relative;\n  left: -30%;\n  top: -7%;\n  z-index: 9;\n`;\n\nconst colours = {\n  colors: {\n    sandyBrown: \"rgba(243,207,79,1)\",\n    transparentBlack: \"rgba(0,0,0,0.25)\",\n    transparentPaleGoldenrod: \"rgba(242,248,175,0.7)\",\n  },\n};\n\nexport const PostItNote = styled.div`\n  padding: 38.25px 0 0;\n`;\nexport const Note = styled.div`\n  width: 300px;\n  height: 300px;\n  background-color: ${colours.colors.sandyBrown};\n  box-shadow: 5px 10px 10px 0 ${colours.colors.transparentBlack};\n  position: relative;\n  padding: 50px;\n`;\nexport const Tape = styled.div`\n  width: 145px;\n  height: 39px;\n  background-color: ${colours.colors.transparentPaleGoldenrod};\n  position: relative;\n  left: 30%;\n  top: 5%;\n  z-index: 9;\n`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [notesList, setNotesList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\");\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get a Phantom Wallet 👻\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendNotes = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No note link given!\");\n      return;\n    }\n    setInputValue(\"\");\n    console.log(\"Notes link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addNote(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Note successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending Note:\", error);\n    }\n  };\n\n  const upVote = async (event) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.upvoteNote(event.target.id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const downVote = async (event) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.downvoteNote(event.target.id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"Vote successfully sent to program\", inputValue);\n\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error sending vote:\", error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const UpDown = (props) => {\n    return (\n      <div>\n        <FontAwesomeIcon icon={faArrowUp} onClick={upVote} id={props.id} />\n        {\" \" + props.votes + \" \"}\n        <FontAwesomeIcon icon={faArrowDown} onClick={downVote} id={props.id} />\n      </div>\n    );\n  };\n\n  const PostItNoteComponent = (props) => {\n    return (\n      <PostItNote>\n        <Tape />\n        <Note>{props.notes}</Note>\n        <UpDownContainer>\n          <UpDown votes={props.votes} id={props.noteId} />\n        </UpDownContainer>\n        <ChipContainer>\n          <Chip\n            className=\"rainbow-m-around_medium\"\n            label={\"🏠: \" + props.userAddress.substring(0, 9)}\n            variant=\"neutral\"\n          />\n        </ChipContainer>\n      </PostItNote>\n    );\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const createNoteAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getNotesList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (notesList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createNoteAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendNotes();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter note!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {notesList.map((note, index) => (\n              <PostItNoteComponent\n                key={index}\n                notes={note.noteText}\n                userAddress={note.userAddress.toString()}\n                id={note.noteId}\n              />\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getNotesList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setNotesList(account.notesList);\n    } catch (error) {\n      console.log(\"Error in getNotesList: \", error);\n      setNotesList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching Notes list...\");\n      getNotesList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Dev Notes Portal</p>\n          <p className=\"sub-text\">\n            View your Dev Notes collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}