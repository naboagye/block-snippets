{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\n\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = blockquote;\nvar lineFeed = '\\n';\nvar tab = '\\t';\nvar space = ' ';\nvar greaterThan = '>';\n\nfunction blockquote(eat, value, silent) {\n  var self = this;\n  var offsets = self.offset;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptBlockquote;\n  var now = eat.now();\n  var currentLine = now.line;\n  var length = value.length;\n  var values = [];\n  var contents = [];\n  var indents = [];\n  var add;\n  var index = 0;\n  var character;\n  var rest;\n  var nextIndex;\n  var content;\n  var line;\n  var startIndex;\n  var prefixed;\n  var exit;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== space && character !== tab) {\n      break;\n    }\n\n    index++;\n  }\n\n  if (value.charAt(index) !== greaterThan) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  index = 0;\n\n  while (index < length) {\n    nextIndex = value.indexOf(lineFeed, index);\n    startIndex = index;\n    prefixed = false;\n\n    if (nextIndex === -1) {\n      nextIndex = length;\n    }\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character !== space && character !== tab) {\n        break;\n      }\n\n      index++;\n    }\n\n    if (value.charAt(index) === greaterThan) {\n      index++;\n      prefixed = true;\n\n      if (value.charAt(index) === space) {\n        index++;\n      }\n    } else {\n      index = startIndex;\n    }\n\n    content = value.slice(index, nextIndex);\n\n    if (!prefixed && !trim(content)) {\n      index = startIndex;\n      break;\n    }\n\n    if (!prefixed) {\n      rest = value.slice(index); // Check if the following code contains a possible block.\n\n      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\n        break;\n      }\n    }\n\n    line = startIndex === index ? content : value.slice(startIndex, nextIndex);\n    indents.push(index - startIndex);\n    values.push(line);\n    contents.push(content);\n    index = nextIndex + 1;\n  }\n\n  index = -1;\n  length = indents.length;\n  add = eat(values.join(lineFeed));\n\n  while (++index < length) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];\n    currentLine++;\n  }\n\n  exit = self.enterBlock();\n  contents = self.tokenizeBlock(contents.join(lineFeed), now);\n  exit();\n  return add({\n    type: 'blockquote',\n    children: contents\n  });\n}","map":{"version":3,"names":["trim","require","interrupt","module","exports","blockquote","lineFeed","tab","space","greaterThan","eat","value","silent","self","offsets","offset","tokenizers","blockTokenizers","interruptors","interruptBlockquote","now","currentLine","line","length","values","contents","indents","add","index","character","rest","nextIndex","content","startIndex","prefixed","exit","charAt","indexOf","slice","push","join","enterBlock","tokenizeBlock","type","children"],"sources":["/Users/The5AMDev/web3/gif-portal-starter/node_modules/remark-parse/lib/tokenize/blockquote.js"],"sourcesContent":["'use strict'\n\nvar trim = require('trim')\nvar interrupt = require('../util/interrupt')\n\nmodule.exports = blockquote\n\nvar lineFeed = '\\n'\nvar tab = '\\t'\nvar space = ' '\nvar greaterThan = '>'\n\nfunction blockquote(eat, value, silent) {\n  var self = this\n  var offsets = self.offset\n  var tokenizers = self.blockTokenizers\n  var interruptors = self.interruptBlockquote\n  var now = eat.now()\n  var currentLine = now.line\n  var length = value.length\n  var values = []\n  var contents = []\n  var indents = []\n  var add\n  var index = 0\n  var character\n  var rest\n  var nextIndex\n  var content\n  var line\n  var startIndex\n  var prefixed\n  var exit\n\n  while (index < length) {\n    character = value.charAt(index)\n\n    if (character !== space && character !== tab) {\n      break\n    }\n\n    index++\n  }\n\n  if (value.charAt(index) !== greaterThan) {\n    return\n  }\n\n  if (silent) {\n    return true\n  }\n\n  index = 0\n\n  while (index < length) {\n    nextIndex = value.indexOf(lineFeed, index)\n    startIndex = index\n    prefixed = false\n\n    if (nextIndex === -1) {\n      nextIndex = length\n    }\n\n    while (index < length) {\n      character = value.charAt(index)\n\n      if (character !== space && character !== tab) {\n        break\n      }\n\n      index++\n    }\n\n    if (value.charAt(index) === greaterThan) {\n      index++\n      prefixed = true\n\n      if (value.charAt(index) === space) {\n        index++\n      }\n    } else {\n      index = startIndex\n    }\n\n    content = value.slice(index, nextIndex)\n\n    if (!prefixed && !trim(content)) {\n      index = startIndex\n      break\n    }\n\n    if (!prefixed) {\n      rest = value.slice(index)\n\n      // Check if the following code contains a possible block.\n      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\n        break\n      }\n    }\n\n    line = startIndex === index ? content : value.slice(startIndex, nextIndex)\n\n    indents.push(index - startIndex)\n    values.push(line)\n    contents.push(content)\n\n    index = nextIndex + 1\n  }\n\n  index = -1\n  length = indents.length\n  add = eat(values.join(lineFeed))\n\n  while (++index < length) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index]\n    currentLine++\n  }\n\n  exit = self.enterBlock()\n  contents = self.tokenizeBlock(contents.join(lineFeed), now)\n  exit()\n\n  return add({type: 'blockquote', children: contents})\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}